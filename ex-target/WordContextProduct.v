// File: ./ex-target/WordContextProduct.v
// Generated by MyHDL 1.0dev
// Date: Mon Oct  5 14:11:53 2015


`timescale 1ns/10ps

module WordContextProduct (
    y,
    y_dword_vec,
    y_dcontext_vec,
    word_embv,
    context_embv
);
// Word-context embeddings product and derivative model.
// 
// :param y: return relu(dot(word_emb, context_emb)) as fixbv
// :param y_dword_vec: return d/dword relu(dot(word_emb, context_emb)) as vector of fixbv
// :param y_dcontext_vec: return d/dcontext relu(dot(word_emb, context_emb)) as vector of fixbv
// :param word_embv: word embedding vector of fixbv
// :param context_embv: context embedding vector of fixbv
// :param embedding_dim: embedding dimensionality
// :param leaky_val: factor for leaky ReLU, 0.0 without
// :param fix_min: fixbv min value
// :param fix_max: fixbv max value
// :param fix_res: fixbv resolution

output signed [15:0] y;
reg signed [15:0] y;
output [47:0] y_dword_vec;
reg [47:0] y_dword_vec;
output [47:0] y_dcontext_vec;
reg [47:0] y_dcontext_vec;
output [47:0] word_embv;
wire [47:0] word_embv;
output [47:0] context_embv;
wire [47:0] context_embv;

wire [47:0] y_dot_dword_vec;
reg signed [15:0] y_dot;
reg signed [15:0] y_relu_dx;
wire [47:0] y_dot_dcontext_vec;

wire signed [15:0] y_dot_dword_list [0:3-1];
wire signed [15:0] y_dot_dcontext_list [0:3-1];
wire signed [15:0] dot_a_list [0:3-1];
wire signed [15:0] dot_b_list [0:3-1];


assign context_embv[48-1:32] = None;
assign context_embv[32-1:16] = None;
assign context_embv[16-1:0] = None;
assign word_embv[48-1:32] = None;
assign word_embv[32-1:16] = None;
assign word_embv[16-1:0] = None;


always @(dot_a_list[0], dot_a_list[1], dot_a_list[2], dot_b_list[0], dot_b_list[1], dot_b_list[2]) begin: WORDCONTEXTPRODUCT_DOT_DOT
    reg signed [32-1:0] y_sum;
    integer j;
    y_sum = fixbv(0.0);
    for (j=0; j<3; j=j+1) begin
        y_sum = (y_sum + (dot_a_list[j] * dot_b_list[j]));
    end
    y_dot = fixbv(y_sum);
end



assign y_dot_dword_vec = context_embv;



assign y_dot_dcontext_vec = word_embv;


always @(y_dot) begin: WORDCONTEXTPRODUCT_RELU_RELU
    reg signed [16-1:0] zero;
    reg signed [16-1:0] leaky;
    if ((y_dot > zero)) begin
        y = y_dot;
    end
    else begin
        y = fixbv((leaky * y_dot));
    end
end


always @(y_dot) begin: WORDCONTEXTPRODUCT_RELU_RELU_DX
    reg signed [16-1:0] zero;
    reg signed [16-1:0] leaky;
    reg signed [16-1:0] one;
    if ((y_dot > zero)) begin
        y_relu_dx = one;
    end
    else begin
        y_relu_dx = leaky;
    end
end


always @(y_relu_dx, y_dot_dword_list[0], y_dot_dword_list[1], y_dot_dword_list[2]) begin: WORDCONTEXTPRODUCT_WCPROD_DWORD
    integer j;
    reg signed [16-1:0] prod;
    for (j=0; j<3; j=j+1) begin
        prod = fixbv((y_relu_dx * y_dot_dword_list[j]));
        y_dword_vec[((j + 1) * 16)-1:(j * 16)] = prod;
    end
end


always @(y_relu_dx, y_dot_dcontext_list[0], y_dot_dcontext_list[1], y_dot_dcontext_list[2]) begin: WORDCONTEXTPRODUCT_WCPROD_DCONTEXT
    integer j;
    reg signed [16-1:0] prod;
    for (j=0; j<3; j=j+1) begin
        prod = fixbv((y_relu_dx * y_dot_dcontext_list[j]));
        y_dcontext_vec[((j + 1) * 16)-1:(j * 16)] = prod;
    end
end

endmodule
