// File: ./ex-target/DotProduct.v
// Generated by MyHDL 1.0dev
// Date: Tue Oct  6 16:32:07 2015


`timescale 1ns/10ps

module DotProduct (
    y,
    y_da_vec,
    y_db_vec,
    a_vec,
    b_vec
);
// Vector dot product and derivative model using fixbv type.
// 
// :param y: return dot(a_vec, b_vec) as fixbv
// :param y_da_vec: return d/da dot(a_vec, b_vec) as vector of fixbv
// :param y_db_vec: return d/db dot(a_vec, b_vec) as vector of fixbv
// :param a_vec: vector of fixbv
// :param b_vec: vector of fixbv
// :param dim: vector dimensionality
// :param fix_min: fixbv min value
// :param fix_max: fixbv max value
// :param fix_res: fixbv resolution

output signed [15:0] y;
reg signed [15:0] y;
output [47:0] y_da_vec;
wire [47:0] y_da_vec;
output [47:0] y_db_vec;
wire [47:0] y_db_vec;
output [47:0] a_vec;
wire [47:0] a_vec;
output [47:0] b_vec;
wire [47:0] b_vec;


wire signed [15:0] a_list [0:3-1];
wire signed [15:0] b_list [0:3-1];


assign b_vec[48-1:32] = None;
assign b_vec[32-1:16] = None;
assign b_vec[16-1:0] = None;
assign a_vec[48-1:32] = None;
assign a_vec[32-1:16] = None;
assign a_vec[16-1:0] = None;


always @(a_list[0], a_list[1], a_list[2], b_list[0], b_list[1], b_list[2]) begin: DOTPRODUCT_DOT
    reg signed [32-1:0] y_sum;
    integer j;
    y_sum = fixbv(0.0);
    for (j=0; j<3; j=j+1) begin
        y_sum = (y_sum + (a_list[j] * b_list[j]));
    end
    y = fixbv(y_sum);
end



assign y_da_vec = b_vec;



assign y_db_vec = a_vec;

endmodule
